.. _as_command:

コマンドラインで利用
====================

Tablelinker モジュールをコマンドラインから呼び出すと、
表データの読み込みやクリーニング、さまざまな変換処理を
コマンドのように実行できます。

Python プログラムを書かずに CSV ファイルに対する変換処理を
バッチ実行したい場合などに有用です。

.. code-block:: bash

    $ python -m tablelinker -h
    Usage:
      tablelinker -h
      tablelinker [-d] [-i <file>] [-s <sheet>] [-o <file>] [--no-cleaning] [<task>]
      tablelinker mapping [-d] [-i <file>] [-o <file>] (<template>|--headers=<headers>)

    ...

このページでは、 Tablelinker モジュールを呼び出すコマンドの
``python -m tablelinker`` を便宜上「Tablelinker コマンド」と呼びます。

ヘルプ表示
----------

Tablelinker コマンドに ``-h`` または ``--help`` オプションを
付けて実行すると、詳しいヘルプ画面が表示されます。

.. code-block:: bash

    $ python -m tablelinker -h

コンバータの適用
----------------

Tablelinker コマンドの基本的な用途は、 CSV ファイルに
:ref:`convertor` を適用して変換処理を行うことです。

コンバータを適用する Tablelinker コマンドの文法は次の通りです。

.. code-block:: bash

    $ python -m tablelinker タスクファイル(後述)

- サンプルデータ

    この節では厚生労働省の「人口動態調査(2020年)」の
    `上巻_3-3-1_都道府県（特別区－指定都市再掲）別にみた人口動態総覧CSV <https://www.data.go.jp/data/dataset/mhlw_20211015_0019>`_ から
    ダウンロードできる ``ma030000.csv`` をサンプルとして利用します。

.. _taskfile:

タスクファイル
^^^^^^^^^^^^^^

適用するコンバータとパラメータは、事前に JSON 形式のファイルに
に記述しておいて、 Tablelinker コマンドの実行時に
``<task>`` パラメータとしてそのファイル名を指定します。

例として、列名を変更する
:py:class:`rename_col <tablelinker.convertors.basics.rename_col.RenameColConvertor>`
コンバータを利用し、0 列目の名前を「都道府県名」に変更する
以下の内容のファイルを ``task1.json`` という名前で作成します。

.. code-block:: json

    {
        "convertor":"rename_col",
        "params":{
            "input_col_idx":0,
            "output_col_name":"都道府県名"
        }
    }

``convertor`` には利用するコンバータ名を、``params`` には
コンバータごとに定義されているパラメータを記述します。

.. note::
    Tablelinker コマンドでは、 ``convertor`` と ``params`` を含む
    オブジェクトを「タスク」と呼び、タスクを記述した JSON ファイルを
    「タスクファイル」と呼びます。

次のコマンドを実行すると、 ``ma030000.csv`` に
このタスクを適用し、結果を表示します。

.. code-block:: bash

    $ cat ma030000.csv | python -m tablelinker task1.json
    都道府県名,人口,出生数,死亡数,（再掲）,,自　然,死産数,,,周産期死亡数,,,婚姻件数,離婚件数
    ,,,,乳児死亡数,新生児,増減数,総数,自然死産,人工死産,総数,22週以後,早期新生児,,
    ,,,,,死亡数,,,,,,の死産数,死亡数,,
    全　国,123398962,840835,1372755,1512,704,-531920,17278,8188,9090,2664,2112,552,525507,193253
    01 北海道,5188441,29523,65078,59,25,-35555,728,304,424,92,75,17,20904,9070
    02 青森県,1232227,6837,17905,18,15,-11068,145,87,58,32,17,15,4032,1915
    03 岩手県,1203203,6718,17204,8,3,-10486,150,90,60,21,19,2,3918,1679
    04 宮城県,2280203,14480,24632,27,15,-10152,311,141,170,56,41,15,8921,3553
    05 秋田県,955659,4499,15379,9,4,-10880,98,63,35,18,15,3,2686,1213
    06 山形県,1060586,6217,15348,14,9,-9131,119,66,53,22,16,6,3530,1362
    ...

コンバータの連続適用
^^^^^^^^^^^^^^^^^^^^

上記の例のように、 Tablelinker コマンドは表データを
標準入力から読み込み、変換結果を標準出力に表示するので、
複数のタスクファイルを用意してパイプで接続すれば
連続してコンバータを適用できます。

列の選択と並び替えを行う
:py:class:`reorder_cols <tablelinker.convertors.basics.reorder_col.ReorderColsConvertor>`
コンバータを利用して、「都道府県名」「人口」「出生数」「死亡数」の
4列を抜き出すタスクファイル ``task2.json`` を作成します。

.. code-block:: json

    {
        "convertor":"reorder_cols",
        "params":{
            "column_list":["都道府県名","人口","出生数","死亡数"]
        }
    }

``ma030000.csv`` に対して ``task1.json`` を適用後に
``task2.json`` を適用するコマンドは次のようになります。

.. code-block:: bash

    $ cat ma030000.csv | python -m tablelinker task1.json | python -m tablelinker task2.json
    都道府県名,人口,出生数,死亡数
    ,,,
    ,,,
    全　国,123398962,840835,1372755
    01 北海道,5188441,29523,65078
    02 青森県,1232227,6837,17905
    03 岩手県,1203203,6718,17204
    04 宮城県,2280203,14480,24632
    05 秋田県,955659,4499,15379
    06 山形県,1060586,6217,15348
    ...

複数のコンバータを適用するタスクファイル
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

タスクファイルに複数のタスクを配列として記述すると、
連続してコンバータを適用する複合タスクを定義することができます。

上記の ``rename_col`` と ``reorder_cols`` を連続して適用する
タスクファイル ``task3.json`` は次のように書きます。

.. code-block:: json

    [
        {
            "convertor":"rename_col",
            "params":{
                "input_col_idx":0,
                "output_col_name":"都道府県名"
            }
        },
        {
            "convertor":"reorder_cols",
            "params":{
                "column_list":["都道府県名","人口","出生数","死亡数"]
            }
        }
    ]

``task3.json`` を適用するコマンドは次のようになります。

.. code-block:: bash

    $ cat ma030000.csv | python -m tablelinker task3.json
    都道府県名,人口,出生数,死亡数
    ,,,
    ,,,
    全　国,123398962,840835,1372755
    01 北海道,5188441,29523,65078
    02 青森県,1232227,6837,17905
    03 岩手県,1203203,6718,17204
    04 宮城県,2280203,14480,24632
    05 秋田県,955659,4499,15379
    06 山形県,1060586,6217,15348
    ...

``task1.json`` と ``task2.json`` を連続して適用したのと
同じ結果が得られます。このようによく利用する一連の変換処理を
1つのタスクファイルにまとめておくと、簡単に再利用できて便利です。

.. note::

    利用可能なコンバータおよびパラメータについては
    :ref:`convertor` を参照してください。


コマンドラインオプション
^^^^^^^^^^^^^^^^^^^^^^^^

Tablelinker コマンドは以下のオプションを指定できます。

- デバッグモード

    ``-d`` または ``--debug`` を付けるとデバッグ情報を表示します。

- 入力ファイル指定

    ``-i <file>`` または ``--input=<file>`` を指定すると、
    標準入力ではなく ``<file>`` から表データを読み込みます。

    つまり上記の ``task1.json`` を適用する処理は、次のように
    書いても同じです。 ::

        $ python -m tablelinker -i ma030000.csv task1.json 

- 出力ファイル指定

    ``-o <file>`` または ``--output=<file>`` を指定すると、
    標準出力ではなく ``<file>`` に CSV データを保存します。

- マージ指定

    ``-m`` または ``--merge`` を指定すると、出力ファイルの
    末尾に追記します。列の並び、文字エンコーディング、
    区切り文字は出力ファイルに合わせ、見出し行をスキップします。

    出力ファイルが指定されていない場合は標準出力に表示しますが、
    見出し行をスキップします。

- クリーニング省略

    ``--no-cleaning`` を指定すると、入力表データに対する
    クリーニング処理を実行しません。

    デフォルトでは、入力表データのファイル種別の判断や、
    文字エンコーディング・フィールド区切り文字の自動判定、
    先頭部のコメントをスキップするといったクリーニング処理を行います。
    そのため一度ファイル全体を読み込む必要があります。

    入力表データが UTF-8 で記述され、カンマ区切りの CSV で
    あることが事前に分かっている場合、クリーニング処理を
    実行しないことで使用するメモリや実行時間を節約できます。

    しかし上記の ``ma0300000.csv`` は Shift JIS なので、
    このオプションを指定するとエラーになります。 ::

        $ cat ma030000.csv | python -m tablelinker --no-cleaning task1.json
        Traceback (most recent call last):
        ...
        UnicodeDecodeError: 'utf-8' codec can't decode byte 0x97 in position 0: invalid start byte

その他の Tips
^^^^^^^^^^^^^

- Excel ファイル入力

    Tablelinker コマンドの入力となる表データには Excel ファイルも
    利用できます。 ::

        $ cat sample.xlsx | python -m tablelinker task1.json
        または
        $ python -m tablelinker -i sample.xlsx task1.json

    Excel ファイルに複数のシートが含まれている場合、最初のシートが
    選択されます。それ以外のシートを読み込みたい場合は
    ``--sheet=シート名`` オプションで対象のシートを指定してください。

        $ python -m tablelinker -i sample.xlsx --sheet=シート1 task1.json

- Excel から CSV へ変換
    タスクファイルを指定しないで Tablelinker コマンドを実行すると、
    入力表データを CSV に変換してクリーニングした結果を出力します。

    この機能を利用すると、 Excel ファイルを CSV に変換することができます。 ::

        $ python -m tablelinker -i sample.xlsx

- 複数のタスクファイルを指定

    複数のタスクファイルを連続適用したい場合、上述したようにパイプで
    接続する他、タスクファイル名を複数指定することもできます。 ::

        $ python -m tablelinker -i ma030000.csv task1.json task2.json

- タスクをコマンドラインで指定

    CSV ファイルに対して一度だけの処理を手軽に実行したい場合は、
    Tablelinker コマンドで convert モードを指定し、
    ``-c`` オプションでコンバータ名を、 ``-p`` オプションで
    パラメータ（JSON記法）を指定してください。
    
    次の例のように、タスクファイルを作らずにタスクを実行できます。

    .. code-block:: bash

        $ python -m tablelinker -i ma030000.csv task3.json | \
          python -m tablelinker convert -c delete_string_match \
            -p '{"input_col_idx":0,"query":""}'
        都道府県名,人口,出生数,死亡数
        全　国,123398962,840835,1372755
        01 北海道,5188441,29523,65078
        02 青森県,1232227,6837,17905
        03 岩手県,1203203,6718,17204
        04 宮城県,2280203,14480,24632
        05 秋田県,955659,4499,15379
        06 山形県,1060586,6217,15348
        ...


見出し列のマッピング
--------------------

- サンプルデータ

    この節では八丈町の `「八丈島の主な観光スポット一覧 (CSVファイル)」
    <https://catalog.data.metro.tokyo.lg.jp/dataset/t134015d0000000002>`_
    からダウンロードできる ``sightseeing.csv`` をサンプルとして利用します。

    また、デジタル庁の `「推奨データセット一覧」 <https://www.digital.go.jp/resources/data_dataset/>`_ ページ内、
    「5 観光施設一覧」の `CSV <https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/0066e8a8-6734-44ab-a9a9-8e09ba9cb508/xxxxxx_tourism.csv>`_ 
    からダウンロードできる ``xxxxxx_tourism.csv`` をテンプレートとして
    利用します。

作成したい CSV と入力表データの列名が少し異なっていたり、
余計な列や足りない列がある、あるいは列の順番が入れ替わっているといった場合、
入力列と出力列の対応表を作成して
:py:class:`mapping_cols <tablelinker.convertors.basics.mapping_col.MappingColsConvertor>`
コンバータを利用すれば、一括変換できます。

しかし入力表ごとの対応表を一つずつゼロから作成するのはとても手間がかかります。
そこで Tablelinker コマンドに ``mapping`` を指定すると mapping モードになり、
``mapping_cols`` コンバータ用のタスクを作成することができます。 ::

    $ python -m tablelinker mapping ...

.. note::

    ``mapping`` は ``tablelinker`` の直後にくる必要があります。

たとえば `「八丈島の主な観光スポット一覧（CSVファイル）」 <https://catalog.data.metro.tokyo.lg.jp/dataset/t134015d0000000002/resource/080dfc76-6027-4681-a2f9-dd4b40a06b13>`_ からダウンロードした
``sightseeing.csv`` を、デジタル庁の推奨データセット
「5 観光施設一覧」の `CSV <https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/0066e8a8-6734-44ab-a9a9-8e09ba9cb508/xxxxxx_tourism.csv>`_ 
からダウンロードした ``xxxxxx_tourism.csv`` の形式に合わせることを考えます。

まず次のコマンドで、``sightseeing.csv`` を ``xxxxxx_tourism.csv`` に合わせる
:py:class:`mapping_cols <tablelinker.convertors.basics.mapping_col.MappingColsConvertor>`
コンバータ用タスクのたたき台を作成します。

.. code-block:: bash

    $ cat sightseeing.csv | python -m tablelinker mapping xxxxxx_tourism.csv
    {
      "convertor": "mapping_cols",
      "params": {
        "column_map": {
          "都道府県コード又は市区町村コード": "八丈町ホームページ記載",
          "NO": null,
          "都道府県名": null,
          "市区町村名": null,
          "名称": "観光スポット名称",
          "名称_カナ": null,
          "名称_英語": null,
          "POIコード": null,
          "住所": "所在地",
          "方書": null,
          "緯度": "緯度",
          "経度": "経度",
          "利用可能曜日": null,
          "開始時間": null,
          "終了時間": null,
          "利用可能日時特記事項": null,
          "料金（基本）": null,
          "料金（詳細）": null,
          "説明": "説明",
          "説明_英語": null,
          "アクセス方法": null,
          "駐車場情報": null,
          "バリアフリー情報": null,
          "連絡先名称": null,
          "連絡先電話番号": null,
          "連絡先内線番号": null,
          "画像": null,
          "画像_ライセンス": null,
          "URL": null,
          "備考": null
        }
      }
    }

``column_map`` が作成された入力列と出力列の対応表で、左側（キー）が
出力列名、右側（値）が入力列名を表します。
値が ``null`` になっている列は、出力列に対応する列が入力表の列から
見つからなかったことを意味します。
上の例では、「緯度」「経度」「説明」列は同じ名前の列がテンプレートにも
存在するのでそのままマップされています。また、「観光スポット名称」列が
「名称」列に、「所在地」列が「住所」列にマップされています。

この結果をタスクファイル ``mapping_task.json`` に保存して、
手作業で修正します。ここでは「八丈島ホームページ記載」は
「URL」に割り当てるのが適切なので、エディタで以下のように修正します。

.. code-block:: json

    {
      "convertor": "mapping_cols",
      "params": {
        "column_map": {
          "都道府県コード又は市区町村コード": null,
          "NO": null,
          "都道府県名": null,
          "市区町村名": null,
          "名称": "観光スポット名称",
          "名称_カナ": null,
          "名称_英語": null,
          "POIコード": null,
          "住所": "所在地",
          "方書": null,
          "緯度": "緯度",
          "経度": "経度",
          "利用可能曜日": null,
          "開始時間": null,
          "終了時間": null,
          "利用可能日時特記事項": null,
          "料金（基本）": null,
          "料金（詳細）": null,
          "説明": "説明",
          "説明_英語": null,
          "アクセス方法": null,
          "駐車場情報": null,
          "バリアフリー情報": null,
          "連絡先名称": null,
          "連絡先電話番号": null,
          "連絡先内線番号": null,
          "画像": null,
          "画像_ライセンス": null,
          "URL": "八丈町ホームページ記載",
          "備考": null
        }
      }
    }

このタスクファイルを利用すると「八丈島の主な観光スポット一覧」を
推奨データセットフォーマット「観光施設一覧」に変換できます。

.. code-block:: bash

    $ cat hachijo_sightseeing.csv | python -m tablelinker mapping_task.json
    都道府県コード又は市区町村コード,NO,都道府県名,市区町村名,名称,名称_カナ,名称_英語,POIコード,住所,方書,緯度,経度,利用可能曜日,開始時間,終了時間,利用可能日時特記事項,料金（基本）,料金（詳細）,説明,説明_英語,アクセス方法,駐車場情報,バリアフリー情報,連絡先名称,連絡先電話番号,連絡先内線番号,画像,画像_ライセンス,URL,備考
    ,,,,ホタル水路,,,,,,33.108218,139.80102,,,,,,,八丈島は伊豆諸島で唯一、水田耕作がなされた島で鴨川に沿って水田が残っています。ホタル水路は、鴨川の砂防とともに平成元年につくられたもので、毎年6月から7月にかけてホタルの光が美しく幻想的です。,,,,,,,,,,http://www.town.hachijo.tokyo.jp/kankou_spot/mitsune.html#01,
    ,,,,登龍峠展望,,,,,,33.113154,139.835245,,,,,,,「ノボリュウトウゲ」または「ノボリョウトウゲ」といい、この道を下方から望むとあたかも龍 が昇天するように見えるので、この名が付けられました。峠道の頂上近くの展望台は、八丈島で一、二を争う景勝地として名高く、新東京百景の一つにも選ばれました。眼前に八丈富士と神止山、八丈小島を、眼下には底土港や神湊港、三根市街を一望できます。,,,,,,,,,,http://www.town.hachijo.tokyo.jp/kankou_spot/mitsune.html#02,
    ,,,,八丈富士,,,,,,33.139168,139.762187,,,,,,,八丈島の北西部を占める山で、東の三原山に対して『西山』と呼ばれます。伊豆諸島の中では最も 高い標高854.3メートル。1605年の噴火後、活動を停止している火山で火口は直径400メートル深さ50メートルで、 さらに火口底には中央火口丘があ る二重式火山です。裾野が大きくのびた優雅な姿は、八丈島を代表する美しさのひとつです。,,,,,,,,,,http://www.town.hachijo.tokyo.jp/kankou_spot/mitsune.html#03,
    ...

コマンドラインオプション
^^^^^^^^^^^^^^^^^^^^^^^^

Tablelinker コマンドの mapping モードでは以下のオプションを指定できます。

- デバッグモード

    ``-d`` または ``--debug`` を付けるとデバッグ情報を表示します。

- 入力ファイル指定

    ``-i <file>`` または ``--input=<file>`` を指定すると、
    標準入力ではなく ``<file>`` から表データを読み込みます。
    シートを指定する場合は ``-s <sheet>`` または ``--sheet=<sheet>`` で
    シート名を指定できます。

- 出力ファイル指定

    ``-o <file>`` または ``--output=<file>`` を指定すると、
    標準出力ではなく ``<file>`` に CSV データを保存します。

- ヘッダ列直接指定

    ``--headers=<headers>`` を指定すると、出力 CSV の列名リストを
    テンプレート CSV ファイルの見出し行から読み込む代わりに、
    文字列で直接指定できます。

    上記のマッピングの例をこのオプションで実行するには
    次のように指定します。 ::

        cat hachijo_sightseeing.csv | python -m tablelinker mapping --headers='都道府県コード又は市区町村コード,NO,都道府県名,市区町村名,名称,名称_カナ,名称_英語,POIコード,住所,方書,緯度,経度,利用可能曜日,開始時間,終了時間,利用可能日時特記事項,料金（基本）,料金（詳細）,説明,説明_英語,アクセス方法,駐車場情報,バリアフリー情報,連絡先名称,連絡先電話番号,連絡先内線番号,画像,画像_ライセンス,URL,備考'

- テンプレートファイルのシート名指定

    テンプレートファイルにも Excel ファイルを利用できます。
    テンプレートとして利用するシートを指定するには、 ::

        python -m tablelinker mapping -i sightseeing.csv \
          -t 観光施設一覧 templates.xlsx

    のように ``-t <sheet>`` または ``--template-sheet=<sheet>`` で
    シート名を指定してください。

- 自動マッピング

    入力表データとテンプレートの差異が小さく、マッピングの結果を
    確認・修正しなくてもそのまま利用できる場合、マッピング情報を
    出力する代わりにマッピング情報に従って変換した結果を出力できます。

    次のように ``-a`` または ``--auto`` オプションを指定します。 ::

        python -m tablelinker mapping -i sightseeing.csv -a xxxxxx_tourism.csv

    列名の表記に多少の揺れがあったり、列の順番が入れ替わっている程度で
    あれば、自動マッピング可能です。

- マージ指定

    自動マッピングが指定されている場合のみ有効です。

    ``-m`` または ``--merge`` を指定すると、出力ファイルの
    末尾に追記します。列の並び、文字エンコーディング、
    区切り文字は出力ファイルに合わせ、見出し行をスキップします。

    出力ファイルが指定されていない場合は標準出力に表示しますが、
    見出し行をスキップします。

